node {
  stage 'build app'
  openshiftBuild(namespace: 'demo', buildConfig: 'welcome', showBuildLogs: 'true')
  stage 'execute image scan'
    openshift.withCluster() {
	def objectModels = openshift.process( "demo//image-inspector-template", "-p", "APPLICATION_NAME=image-inspector", "-p", "IMAGE_URL=docker-registry-default.apps.dwojciec.com/demo/welcome:latest")
        echo "Creating this template will instantiate ${objectModels.size()} objects"
	def objects
        def verb
        verb = "Created"
        objects = openshift.create(objectModels)
        
        //def objects = openshift.create( objectModels )
        echo "Application created"
	objects.describe()    
	 // Create returns a selector which will always select the objects created
                objects.withEach {
                    // Each loop binds the variable 'it' to a selector which selects a single object
                    echo "${verb} ${it.name()} from template with labels ${it.object().metadata.labels} and status ${it.object().status.phase} "
		     	
                }
	    echo "Waiting for Pod running ...."
	    
	    // echo "name of pod : ${it.object().name[2]}"
	    timeout(5) {
	    objects.related( 'pods' ).untilEach {
                return (it.object().status.phase == "Running")
              }
	      }
	def pod-inspect  =     objects.related( 'pods' )
	    echo "pod-inspect : ${pod-inspect.name}"
	    
	sh "oc logs image-inspector-pod  | grep webdav"     
	// def pod-inspect  = created.narrow("pod")
	// def result = pod-inspect.log('-f')
	// echo "The logs operation require ${result.actions.size()} oc interactions"
        // You can even see exactly what oc command was executed.
        // echo "Logs executed: ${result.actions[0].cmd}"

        // And even obtain the standard output and standard error of the command.
        // def logsString = result.actions[0].out
        // def logsErr = result.actions[0].err
	   // echo "Logs logString: ${logsString}"
	   // echo "Log Err : ${logErr}"
    
    }
  stage 'review report'
  input "Do you want to deploy the application ?"

  stage 'deploy app'
  openshiftDeploy(namespace: 'demo', deploymentConfig: 'welcome')
  openshiftDeleteResourceByLabels(namespace: 'demo', apiURL: 'https://openshift.default.svc.cluster.local', authToken: '', types: 'route,svc,pod', keys: 'app' , values: 'image-inspector', verbose: 'false')
  sh "oc get all -l app=image-inspector" 	
}
